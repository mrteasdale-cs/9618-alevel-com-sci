# -*- coding: utf-8 -*-
"""LinearRegression_step_by_step.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xFu6fBVQa5-3_ubmMMwEI9mRxssdqvSv

## Import Libraries
"""

import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
from sklearn import linear_model
from sklearn.metrics import mean_squared_error, r2_score

"""## Generate Dataset"""

# Fix the random seed to reproduce experiments
np.random.seed(0)

# Generate 100 independent values of Gaussian (normal) distribution with mean = 1.5, stddev = 2
X = 2 * np.random.randn(100) + 1.5

# Generate 100 independent Gaussian-distributed noise terms (mean = 0, stddev = 0.5)
noise = 0.5 * np.random.randn(100)

# Compute the outcomes using Y = mX + c + noise
Y = 0.3*X + 2 + noise

"""## Plot Dataset"""

# Format the dataset into the tabular format
df = pd.DataFrame(
    {'X': X,
     'Y': Y}
)

# Show the first 5 data points
df.head()

# Plot the scatter points of the dataset
plt.scatter(df['X'], df['Y'], color='black')

"""## Fit Linear Regression"""

# Get the independent and dependent variables (x, y)
(x, y) = (df.iloc[:,:-1], df.iloc[:,-1:])

# Create a linear regression model
regr = linear_model.LinearRegression()

# Fit the model to the dataset
regr.fit(x, y)

# Display the model parameters
print('Regression coefficients: %.2f' % regr.coef_)
print('Intercept: %.2f' % regr.intercept_)

"""## Plot Predictions"""

# Make predictions using the fit model
y_pred = regr.predict(x)

# Plot the results
plt.scatter(x, y,  color='black')
plt.plot(x, y_pred, color='blue', linewidth=3)

"""## Analyse Performance"""

print('Mean squared error: %.2f' % mean_squared_error(y, y_pred))
print('R2 score: %.2f' % r2_score(y, y_pred))