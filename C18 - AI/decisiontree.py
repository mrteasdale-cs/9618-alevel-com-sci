# -*- coding: utf-8 -*-
"""DecisionTree_step_by_step.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11gjKBmmSGYyVATRI7LI4UYAKMH1_toWN

## Install Packages
"""

# This is for Google Colab
!sudo apt-get install graphviz
!pip install graphviz
!pip install pydotplus
!pip install sklearn
!pip install pydot
!pip install pandas

"""## Import Libraries"""

# Commented out IPython magic to ensure Python compatibility.
import pydotplus
import pandas as pd
import numpy as np
from sklearn import tree
from io import StringIO
import pydot
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report
from sklearn.metrics import plot_confusion_matrix
# %matplotlib inline

"""## Generate Dataset"""

# Generate 5 data points with 2 features, belonging to 2 classes (0, 1)
data = [
  (0, 5, 0),
  (1, 6, 0),
  (2, 7, 1),
  (3, 8, 1),
  (4, 9, 1)
]
df = pd.DataFrame(data, index=range(5), columns=['x1','x2','y'])
df.head()

# Train a decision tree model on the data using the entropy measure
x_columns = ['x1','x2']
model = tree.DecisionTreeClassifier(criterion='entropy') # Alternative: gini
trained_model = model.fit(df[x_columns], df['y'])

# Plot the decision tree structure
from IPython.display import Image
out_file = tree.export_graphviz(
        trained_model,
        feature_names = x_columns,
        class_names = ['[y=0]', '[y=1]'],
        filled = True,
        rounded = True
)
graph = pydotplus.graph_from_dot_data(out_file)
Image(graph.create_png())

"""## Import Real Dataset"""

# Load the csv dataset (source: https://archive.ics.uci.edu/ml/datasets/banknote+authentication)
dataset = pd.read_csv("bill_authentication.csv")
print(dataset.shape)
dataset.head()

# Split the dataset into the training and test sets
X = dataset.drop('Class', axis=1)
y = dataset['Class']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=0)

"""## Fit Decision Tree"""

# Fit a decision tree model on the training set
model = DecisionTreeClassifier(criterion='entropy', max_depth=3)
trained_model = model.fit(X_train, y_train)

# Visualize the tree structure
from IPython.display import Image
out_file = tree.export_graphviz(
        trained_model,
        feature_names = ['Variance', 'Skewness', 'Curtosis', 'Entropy'],
        class_names = ['Authentic', 'Forgery'],
        filled = True,
        rounded = True
)
graph = pydotplus.graph_from_dot_data(out_file)
Image(graph.create_png())

"""## Compute Performance"""

# Make predictions on the test data points
y_pred = trained_model.predict(X_test)

# Print the classification report
print(classification_report(y_test, y_pred, target_names=['Authentic', 'Forgery']))

# Print the confusion matrix
plot_confusion_matrix(trained_model, X_test, y_test, display_labels=['Authentic', 'Forgery'])
plt.show()

